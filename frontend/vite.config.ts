import tailwindCssPlugin from '@tailwindcss/vite';
import hotReloadExtensionPlugin from 'hot-reload-extension-vite';
import { defineConfig } from 'vite';
import checkerPlugin from 'vite-plugin-checker';
import prettyModuleClassnamesPlugin from 'vite-plugin-pretty-module-classnames';
import sassDtsPlugin from 'vite-plugin-sass-dts';
import solidPlugin from 'vite-plugin-solid';
import solidSvgPlugin from 'vite-plugin-solid-svg';

import { chromeExtensionPlugin } from './chromeExtensionPlugin';

export default defineConfig(({ mode }) => {
  const isDevelopment = mode === 'development';

  return {
    envPrefix: 'WORD_TO_PDF_',
    plugins: [
      tailwindCssPlugin(),
      solidPlugin(),
      solidSvgPlugin(),
      checkerPlugin({
        typescript: {
          buildMode: true,
          tsconfigPath: './tsconfig.build.json',
        },
      }),
      prettyModuleClassnamesPlugin(),
      sassDtsPlugin({
        // By default only the `development` mode is enabled, which means that the `d.ts` files are generated only:
        //  - when the `dev` command is running
        //  - and after the source files are changed
        // Let's add the `production` mode so that the `d.ts` files are generated by the `build` command as well.
        enabledMode: ['development', 'production'],
        esmExport: true,
      }),
      chromeExtensionPlugin(),
      hotReloadExtensionPlugin({
        log: true,
        backgroundPath: './src/extension/background/serviceWorker.ts',
      }),
    ],
    build: {
      minify: !isDevelopment,
      sourcemap: isDevelopment,
      terserOptions: {
        compress: !isDevelopment,
        mangle: !isDevelopment,
      },
      rollupOptions: {
        input: {
          popup: './src/extension/popup/popup.html',
          contentScriptWrapper: './src/extension/content/contentScriptWrapper.ts',
          contentScript: './src/extension/content/contentScript.tsx',
          serviceWorker: './src/extension/serviceWorker/serviceWorker.ts',
          offscreen: './src/extension/offscreen/offscreen.html',
        },
      },
    },
  };
});
